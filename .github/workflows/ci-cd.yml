name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Minimum Python version we support
  MIN_PYTHON_VERSION: "3.9"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up git
      run: |
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Lint with ruff
      run: |
        uv run --frozen ruff check .

    - name: Format check with ruff
      run: |
        uv run --frozen ruff format --check .

    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v --cov=src/git_ignore --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        uv run pytest tests/integration/ -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.MIN_PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Build packages
      run: |
        uv build

    - name: Check package metadata
      run: |
        uv run python -m pip install twine
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/
        retention-days: 90

  test-install:
    name: Test package installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.12"]

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Install package from wheel
      shell: bash
      run: |
        python -m pip install dist/*.whl

    - name: Test basic functionality
      shell: bash
      run: |
        git-ignore --version
        git-ignore --help

    - name: Test in temporary git repo
      shell: bash
      run: |
        mkdir test-repo
        cd test-repo
        git init
        git config user.email "test@example.com"
        git config user.name "Test User"
        git-ignore "*.pyc" "__pycache__/"
        test -f .gitignore
        grep "*.pyc" .gitignore
        grep "__pycache__/" .gitignore

  security:
    name: Security checks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.MIN_PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev bandit[toml] safety

    - name: Run bandit security linter
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -f txt

    - name: Run safety check
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run safety check

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [test, build, test-install, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: release
      url: https://pypi.org/project/git-ignore/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/*"
        body: |
          Release ${{ github.ref_name }}

          Install with: `pip install git-ignore==${{ github.ref_name }}`

          ## Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  performance:
    name: Performance benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.MIN_PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add --dev pytest-benchmark

    - name: Set up git
      run: |
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"

    - name: Run performance benchmarks
      run: |
        uv run pytest tests/ -k "benchmark" --benchmark-json=benchmark-results.json || true

    - name: Upload benchmark results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json
        retention-days: 30

    - name: Comment benchmark results on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
            const comment = `## Performance Benchmark Results\n\nBenchmarks completed for commit ${context.sha.substring(0, 7)}.\n\nSee artifacts for detailed results.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('No benchmark results to report');
          }

  docs:
    name: Build and check documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.MIN_PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Check README examples work
      run: |
        # Extract and test code examples from README
        git init temp-readme-test
        cd temp-readme-test
        git config user.email "test@example.com"
        git config user.name "Test User"

        # Test basic examples from README
        uv run python -m git_ignore.main "*.pyc" "__pycache__/"
        test -f .gitignore
        grep "*.pyc" .gitignore

    - name: Validate CLAUDE.md format
      run: |
        test -f CLAUDE.md
        grep -q "Development" CLAUDE.md